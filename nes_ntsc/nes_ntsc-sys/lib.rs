#[allow(bad_style)]

/* automatically generated by rust-bindgen */
pub const NES_NTSC_EMPHASIS: ::std::os::raw::c_uint = 1;
pub const NES_NTSC_OUT_DEPTH: ::std::os::raw::c_uint = 32;
pub const nes_ntsc_rgb_builder: ::std::os::raw::c_uint = 2099202;
pub const nes_ntsc_clamp_mask: ::std::os::raw::c_uint = 3148803;
pub const nes_ntsc_clamp_add: ::std::os::raw::c_uint = 539494914;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nes_ntsc_setup_t {
    pub hue: f64,
    pub saturation: f64,
    pub contrast: f64,
    pub brightness: f64,
    pub sharpness: f64,
    pub gamma: f64,
    pub resolution: f64,
    pub artifacts: f64,
    pub fringing: f64,
    pub bleed: f64,
    pub merge_fields: ::std::os::raw::c_int,
    pub decoder_matrix: *const f32,
    pub palette_out: *mut ::std::os::raw::c_uchar,
    pub palette: *const ::std::os::raw::c_uchar,
    pub base_palette: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_nes_ntsc_setup_t() {
    assert_eq!(::std::mem::size_of::<nes_ntsc_setup_t>() , 120usize);
    assert_eq!(::std::mem::align_of::<nes_ntsc_setup_t>() , 8usize);
}
impl Clone for nes_ntsc_setup_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "nes_ntsc_composite"]
    pub static nes_ntsc_composite: nes_ntsc_setup_t;
}
extern "C" {
    #[link_name = "nes_ntsc_svideo"]
    pub static nes_ntsc_svideo: nes_ntsc_setup_t;
}
extern "C" {
    #[link_name = "nes_ntsc_rgb"]
    pub static nes_ntsc_rgb: nes_ntsc_setup_t;
}
extern "C" {
    #[link_name = "nes_ntsc_monochrome"]
    pub static nes_ntsc_monochrome: nes_ntsc_setup_t;
}
pub const nes_ntsc_palette_size: _bindgen_ty_1 =
    _bindgen_ty_1::nes_ntsc_palette_size;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 { nes_ntsc_palette_size = 512, }
#[repr(C)]
pub struct nes_ntsc_t {
    pub table: [[nes_ntsc_rgb_t; 128usize]; 512usize],
}
#[test]
fn bindgen_test_layout_nes_ntsc_t() {
    assert_eq!(::std::mem::size_of::<nes_ntsc_t>() , 524288usize);
    assert_eq!(::std::mem::align_of::<nes_ntsc_t>() , 8usize);
}
extern "C" {
    pub fn nes_ntsc_init(ntsc: *mut nes_ntsc_t,
                         setup: *const nes_ntsc_setup_t);
}
extern "C" {
    pub fn nes_ntsc_blit(ntsc: *const nes_ntsc_t,
                         nes_in: *const ::std::os::raw::c_ushort,
                         in_row_width: ::std::os::raw::c_long,
                         burst_phase: ::std::os::raw::c_int,
                         in_width: ::std::os::raw::c_int,
                         in_height: ::std::os::raw::c_int,
                         rgb_out: *mut ::std::os::raw::c_void,
                         out_pitch: ::std::os::raw::c_long);
}
pub const nes_ntsc_in_chunk: _bindgen_ty_2 = _bindgen_ty_2::nes_ntsc_in_chunk;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 { nes_ntsc_in_chunk = 3, }
pub const nes_ntsc_out_chunk: _bindgen_ty_3 =
    _bindgen_ty_3::nes_ntsc_out_chunk;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 { nes_ntsc_out_chunk = 7, }
pub const nes_ntsc_black: _bindgen_ty_4 = _bindgen_ty_4::nes_ntsc_black;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 { nes_ntsc_black = 15, }
pub const nes_ntsc_burst_count: _bindgen_ty_5 =
    _bindgen_ty_5::nes_ntsc_burst_count;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 { nes_ntsc_burst_count = 3, }
pub const nes_ntsc_entry_size: _bindgen_ty_6 =
    _bindgen_ty_6::nes_ntsc_entry_size;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 { nes_ntsc_entry_size = 128, }
pub type nes_ntsc_rgb_t = ::std::os::raw::c_ulong;
pub const nes_ntsc_burst_size: _bindgen_ty_7 =
    _bindgen_ty_7::nes_ntsc_burst_size;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 { nes_ntsc_burst_size = 42, }
pub const nes_ntsc_min_in_width: _bindgen_ty_8 =
    _bindgen_ty_8::nes_ntsc_min_in_width;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 { nes_ntsc_min_in_width = 256, }
pub const nes_ntsc_min_out_width: _bindgen_ty_9 =
    _bindgen_ty_9::nes_ntsc_min_out_width;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 { nes_ntsc_min_out_width = 602, }
pub const nes_ntsc_640_in_width: _bindgen_ty_10 =
    _bindgen_ty_10::nes_ntsc_640_in_width;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 { nes_ntsc_640_in_width = 271, }
pub const nes_ntsc_640_out_width: _bindgen_ty_11 =
    _bindgen_ty_11::nes_ntsc_640_out_width;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 { nes_ntsc_640_out_width = 637, }
pub const nes_ntsc_640_overscan_left: _bindgen_ty_12 =
    _bindgen_ty_12::nes_ntsc_640_overscan_left;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_12 { nes_ntsc_640_overscan_left = 8, }
pub const nes_ntsc_640_overscan_right: _bindgen_ty_13 =
    _bindgen_ty_13::nes_ntsc_640_overscan_right;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_13 { nes_ntsc_640_overscan_right = 7, }
pub const nes_ntsc_full_in_width: _bindgen_ty_14 =
    _bindgen_ty_14::nes_ntsc_full_in_width;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_14 { nes_ntsc_full_in_width = 283, }
pub const nes_ntsc_full_out_width: _bindgen_ty_15 =
    _bindgen_ty_15::nes_ntsc_full_out_width;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 { nes_ntsc_full_out_width = 665, }
pub const nes_ntsc_full_overscan_left: _bindgen_ty_16 =
    _bindgen_ty_16::nes_ntsc_full_overscan_left;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_16 { nes_ntsc_full_overscan_left = 16, }
pub const nes_ntsc_full_overscan_right: _bindgen_ty_17 =
    _bindgen_ty_17::nes_ntsc_full_overscan_right;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_17 { nes_ntsc_full_overscan_right = 11, }
